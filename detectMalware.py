'''

This program scans a folder and uses heuristics to determine if
each file in that folder is a malware.

The Heuristics are as follows:

(1) If three or more functions have the same memory address
(2) If two or more functions have the same name
(3) If three or more functions have the same memory offset

'''

import os
import pefile
import sys

malwareList = [] # Contents of folder

path = "path" #Insert path to folder here
files = os.listdir(path)

# Adds each file into malwareList[]
for name in files:
	malwareList.append(name)

# Loop through each file
for malwareFile in malwareList:

	pe = pefile.PE(malwareFile)

	if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
		fileName = malwareFile
		addressList = []
		nameList = []
		addressDict = {}
		nameDict = {}
		
		print("Malware Sample: " + fileName) # File Scanned
		
		# Add everything into lists
		for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
			addressName = hex(exp.address + pe.OPTIONAL_HEADER.ImageBase)
			functionName = exp.name
	
			addressList.append(addressName)
			nameList.append(functionName)
		
		# Check for duplicate addresses
		for address in addressList:
			
			if address not in addressDict:
				addressDict[address] = 1
				
			if address in addressDict:
				addressDict[address] += 1
				
				if addressDict[address] > 2:
					print ("Rule 1 Broken - Contains duplicate memory addresses")
					break
					
		# Check for duplicate names
		for name in nameList:
			
			if name not in nameDict:
				nameDict[name] = 1
				
			if name in nameDict:
				nameDict[name] += 1
				
				if nameDict[name] > 1:
					print("Rule 2 Broken - Contains duplicate export functions")
					break

				
'''
This assumes that the memory addresses are in ascending order, 
therefore checking the offsets in blocks of 3
'''
		# Check for duplicate offsets
		for i in range(2, len(addressList)):
			
			hex3 = addressList[i]
			hex2 = addressList[i-1]
			hex1 = addressList[i-2]
						
			int3 = int(hex3, 16)
			int2 = int(hex2, 16)
			int1 = int(hex1, 16)
		
			offset2 = int3 - int2
			offset1 = int2 - int1
	
			if hex(offset2) == hex(offset1):
				print("Rule 3 Broken - Contains duplicate offsets")
				break
			
		print("") # Spacing
