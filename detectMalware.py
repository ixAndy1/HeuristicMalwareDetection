'''

This program uses heuristics to determine if the contents of a folder are samples of malware.
The Heuristics are as follows:

(1) If three or more export functions have the same memory address
(2) If two or more export functions have the same name
(3) If three or more export functions have the same memory offset

'''

import os
import pefile
import sys

malwareList = [] # Malware sample array

path = "/home/csc495/Desktop/Malware" 
files = os.listdir(path)

# Adds each malware sample into malwareList[]
for name in files:
	malwareList.append(name)

# Loop through each malware sample
for malwareFile in malwareList:

	pe = pefile.PE(malwareFile)

	if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
		fileName = malwareFile
		addressList = []
		nameList = []
		ordinalList = []
		addressDict = {}
		nameDict = {}
		
		print("Malware Sample: " + fileName) # Malware Sample Scanned
		
		# Add everything into lists
		for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
			address = hex(exp.address + pe.OPTIONAL_HEADER.ImageBase)
			exportFunction = exp.name
			ordinalNumber = exp.ordinal
	
			addressList.append(address)
			nameList.append(exportFunction)
			ordinalList.append(ordinalNumber)
		
		# Check for duplicate addresses
		for x in addressList:
			if x not in addressDict:
				addressDict[x] = 1
			if x in addressDict:
				addressDict[x] += 1

		for count in addressDict.values():
			if count > 2:
			        print("Rule 1 Broken - Contains duplicate memory addresses")
			        break
					
		# Check for duplicate names
		for x in nameList:
			if x not in nameDict:
				nameDict[x] = 1
			if x in nameDict:
				nameDict[x] += 1

		for count in nameDict.values():
			if count > 1:
			        print("Rule 2 Broken - Contains duplicate export functions")
	    		   	break
				
'''
This assumes that the memory addresses are in ascending order, 
therefore checking the offsets in blocks of 3
'''
		# Check for duplicate offsets
		for i in range(2, len(addressList)):
			
			hex3 = addressList[i]
			hex2 = addressList[i-1]
			hex1 = addressList[i-2]
						
			int3 = int(hex3, 16)
			int2 = int(hex2, 16)
			int1 = int(hex1, 16)
		
			offset2 = int3 - int2
			offset1 = int2 - int1
	
			if hex(offset2) == hex(offset1):
				print("Rule 3 Broken - Contains duplicate offsets")
				break
			
		print("") # Spacing
